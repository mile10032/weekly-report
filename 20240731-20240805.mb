# 週報　2024/07/31 ~ 2024/08/05
## 目標   
バックエンドエンジニアとして自社開発企業に内定をもらう

## マイルストーン
- 2024/1/14 - 2024/3/14
  - Milestones 1: Advanced, Git, Backend Project 1, Project 2 team dev, Frontend Project 1 & 4 を終わらせる。
- 2024/07/21 -2024/09/15
  - Milestones 2: OOP, project 3, Database　を終わらせる。
- 2024/09/16-2024/12/15
  - Milestones 3: Backend Project 4, Project 5, Team Development　を終わらせる。
   
## 今週の予定：やる予定だったこと・目標
  - Task1
    -　OOPを進める
    
## 今週やったこと：実際にやったこと・実稼働
- Task1
  - OOP 抽象クラスとインターフェース,抽象クラス、抽象構造体、インターフェース

## タスクの進捗について
- Task1
  - 　OOP 抽象クラスとインターフェース,抽象クラス、抽象構造体、インターフェース
## 所感・学び

 抽象クラスは、他のクラスに継承されるために設計されたクラスで具体的な実装がないメソッドを持っており、サブクラスで必ずオーバーライドされる必要があります。　　
 インスタンス化できないという特徴を持ち、abstractと明示する必要があります。　　
 このクラスの目的は共通の機能やプロパティを持つ複数の関連クラスに共通の基盤となるために存在しており、継承することで、重複したコードを書く必要をなくすために存在します。　　
 インターフェースは、実装をも持たず他のクラスに実装させるため抽象メソッドを持ちます。　　
 インターフェースは抽象クラスとおなじく継承ができるため、混同しやすいですが、以下のように使い分けができます。　　
 インターフェースは多重継承が可能ですが、抽象クラスは多重継承ができません。　（Javaはクラスの多重継承が禁止されているため）
 またインターフェースは具体的な実装をもてませんが、抽象クラスは持つことができます。　　
 インターフェースはpublicでないといけないという違いがあります。　　
 これらの特性を踏まえると、抽象クラスは共通の動作や状態を持つクラス群に基盤を提供し、部分的な実装を持たせたい時に使い　　
 その一方でインターフェースはクラス間で共通の契約を強制し、多重継承を行いたい時に使うといった使い分けができます。　　
 ふたつの違いを理解することで具体的な設計や要件に応じて、適切に使い分けることでより保守性が高く、柔軟性の強いプログラムを書くことができると学びました。
